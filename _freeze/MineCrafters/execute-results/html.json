{
  "hash": "e84bc65b0640f700c99d5cef97935512",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Brick-Metrics\nsubtitle: Building Precision in Predicting USA Home Prices\nauthor: MineCrafters\ncode-fold: true\n---\n\n## Abstract\n\nThis project is aimed at the development and evaluation of regression models for predicting housing prices using a dataset titled 'USA_Housing.csv.' The overarching goal is to construct robust and accurate models through the application of various machine learning algorithms. The project follows a systematic workflow, encompassing data exploration, feature engineering, model training, hyperparameter tuning, and comprehensive performance evaluation.\n\nThe initial phase involves the importation of essential Python libraries, such as NumPy, Pandas, Matplotlib, Seaborn, and scikit-learn, conducting an in-depth exploratory data analysis (EDA), unveiling insights into data distributions, correlations, and potential preprocessing requirements. Visualizations, including histograms, bar plots, and heatmaps, aid in understanding the dataset's characteristics.\n\nFurther, the project employs a diverse set of regression models, including Decision Tree Regressor, Random Forest Regressor, XGBoost Regressor, Support Vector Regression (SVR), and Elastic Net Regression. Thus, the project provides a practical implementation of regression modeling for housing price prediction\n\n\n## Introduction\n\nIn the dynamic landscape of the US real estate market, predicting house prices is paramount for informed decision-making. This project employs cutting-edge machine learning techniques to unravel the intricate patterns and factors influencing housing values. By leveraging vast datasets, our aim is to develop a robust predictive model.\n\n\n## Question\n\nHow accurately can the housing prices in the US be predicted?\n\n::: {#4ac924a9 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\n```\n:::\n\n\n::: {#ad0f5ac5 .cell execution_count=2}\n``` {.python .cell-code}\n# Reading csv file\ndata = pd.read_csv('USA_Housing.csv')\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Avg. Area Income</th>\n      <th>Avg. Area House Age</th>\n      <th>Avg. Area Number of Rooms</th>\n      <th>Avg. Area Number of Bedrooms</th>\n      <th>Area Population</th>\n      <th>Price</th>\n      <th>Address</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>79545.458574</td>\n      <td>5.682861</td>\n      <td>7.009188</td>\n      <td>4.09</td>\n      <td>23086.800503</td>\n      <td>1.059034e+06</td>\n      <td>208 Michael Ferry Apt. 674\\r\\nLaurabury, NE 37...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>79248.642455</td>\n      <td>6.002900</td>\n      <td>6.730821</td>\n      <td>3.09</td>\n      <td>40173.072174</td>\n      <td>1.505891e+06</td>\n      <td>188 Johnson Views Suite 079\\r\\nLake Kathleen, ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>61287.067179</td>\n      <td>5.865890</td>\n      <td>8.512727</td>\n      <td>5.13</td>\n      <td>36882.159400</td>\n      <td>1.058988e+06</td>\n      <td>9127 Elizabeth Stravenue\\r\\nDanieltown, WI 064...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>63345.240046</td>\n      <td>7.188236</td>\n      <td>5.586729</td>\n      <td>3.26</td>\n      <td>34310.242831</td>\n      <td>1.260617e+06</td>\n      <td>USS Barnett\\r\\nFPO AP 44820</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>59982.197226</td>\n      <td>5.040555</td>\n      <td>7.839388</td>\n      <td>4.23</td>\n      <td>26354.109472</td>\n      <td>6.309435e+05</td>\n      <td>USNS Raymond\\r\\nFPO AE 09386</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4995</th>\n      <td>60567.944140</td>\n      <td>7.830362</td>\n      <td>6.137356</td>\n      <td>3.46</td>\n      <td>22837.361035</td>\n      <td>1.060194e+06</td>\n      <td>USNS Williams\\r\\nFPO AP 30153-7653</td>\n    </tr>\n    <tr>\n      <th>4996</th>\n      <td>78491.275435</td>\n      <td>6.999135</td>\n      <td>6.576763</td>\n      <td>4.02</td>\n      <td>25616.115489</td>\n      <td>1.482618e+06</td>\n      <td>PSC 9258, Box 8489\\r\\nAPO AA 42991-3352</td>\n    </tr>\n    <tr>\n      <th>4997</th>\n      <td>63390.686886</td>\n      <td>7.250591</td>\n      <td>4.805081</td>\n      <td>2.13</td>\n      <td>33266.145490</td>\n      <td>1.030730e+06</td>\n      <td>4215 Tracy Garden Suite 076\\r\\nJoshualand, VA ...</td>\n    </tr>\n    <tr>\n      <th>4998</th>\n      <td>68001.331235</td>\n      <td>5.534388</td>\n      <td>7.130144</td>\n      <td>5.44</td>\n      <td>42625.620156</td>\n      <td>1.198657e+06</td>\n      <td>USS Wallace\\r\\nFPO AE 73316</td>\n    </tr>\n    <tr>\n      <th>4999</th>\n      <td>65510.581804</td>\n      <td>5.992305</td>\n      <td>6.792336</td>\n      <td>4.07</td>\n      <td>46501.283803</td>\n      <td>1.298950e+06</td>\n      <td>37778 George Ridges Apt. 509\\r\\nEast Holly, NV...</td>\n    </tr>\n  </tbody>\n</table>\n<p>5000 rows Ã— 7 columns</p>\n</div>\n```\n:::\n:::\n\n\n# Exploratory Data Analysis\n\n::: {#e22b9ea1 .cell execution_count=3}\n``` {.python .cell-code}\ndata.info()#print a concise summary of a DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 7 columns):\n #   Column                        Non-Null Count  Dtype  \n---  ------                        --------------  -----  \n 0   Avg. Area Income              5000 non-null   float64\n 1   Avg. Area House Age           5000 non-null   float64\n 2   Avg. Area Number of Rooms     5000 non-null   float64\n 3   Avg. Area Number of Bedrooms  5000 non-null   float64\n 4   Area Population               5000 non-null   float64\n 5   Price                         5000 non-null   float64\n 6   Address                       5000 non-null   object \ndtypes: float64(6), object(1)\nmemory usage: 273.6+ KB\n```\n:::\n:::\n\n\n::: {#cb5c047e .cell execution_count=4}\n``` {.python .cell-code}\n# Checking null values\ndata.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nAvg. Area Income                0\nAvg. Area House Age             0\nAvg. Area Number of Rooms       0\nAvg. Area Number of Bedrooms    0\nArea Population                 0\nPrice                           0\nAddress                         0\ndtype: int64\n```\n:::\n:::\n\n\n::: {#c09ff6c6 .cell execution_count=5}\n``` {.python .cell-code}\ndata.describe()# Generate descriptive statistics summarizing central tendency, dispersion, and shape of dataset's distribution.\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Avg. Area Income</th>\n      <th>Avg. Area House Age</th>\n      <th>Avg. Area Number of Rooms</th>\n      <th>Avg. Area Number of Bedrooms</th>\n      <th>Area Population</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5000.000000</td>\n      <td>5000.000000</td>\n      <td>5000.000000</td>\n      <td>5000.000000</td>\n      <td>5000.000000</td>\n      <td>5.000000e+03</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>68583.108984</td>\n      <td>5.977222</td>\n      <td>6.987792</td>\n      <td>3.981330</td>\n      <td>36163.516039</td>\n      <td>1.232073e+06</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>10657.991214</td>\n      <td>0.991456</td>\n      <td>1.005833</td>\n      <td>1.234137</td>\n      <td>9925.650114</td>\n      <td>3.531176e+05</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>17796.631190</td>\n      <td>2.644304</td>\n      <td>3.236194</td>\n      <td>2.000000</td>\n      <td>172.610686</td>\n      <td>1.593866e+04</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>61480.562388</td>\n      <td>5.322283</td>\n      <td>6.299250</td>\n      <td>3.140000</td>\n      <td>29403.928702</td>\n      <td>9.975771e+05</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>68804.286404</td>\n      <td>5.970429</td>\n      <td>7.002902</td>\n      <td>4.050000</td>\n      <td>36199.406689</td>\n      <td>1.232669e+06</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>75783.338666</td>\n      <td>6.650808</td>\n      <td>7.665871</td>\n      <td>4.490000</td>\n      <td>42861.290769</td>\n      <td>1.471210e+06</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>107701.748378</td>\n      <td>9.519088</td>\n      <td>10.759588</td>\n      <td>6.500000</td>\n      <td>69621.713378</td>\n      <td>2.469066e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#0761d3c7 .cell execution_count=6}\n``` {.python .cell-code}\n# Data Claening\ndf = pd.DataFrame()\ndf['Income'] = data['Avg. Area Income'].round(2)# Round 'Avg. Area Income' to 2 decimal places and store in 'Income'.\ndf['House Age'] = data['Avg. Area House Age'].apply(int)# Converting 'Avg. Area House Age' to integers and adding it to 'df' as 'House Age'.\ndf['No. of Rooms'] = data['Avg. Area Number of Rooms'].apply(int)# Converting 'Avg. Area Number of Rooms' to integers and adding it to 'df' as 'No. of Rooms'.\ndf['No. of Bedrooms'] = data['Avg. Area Number of Bedrooms'].apply(int)# Converting 'Avg. Area Number of Bedrooms' to integers and adding it to 'df' as 'No. of Bedrooms'.\ndf['Population'] = data['Area Population'].apply(int)# Converting 'Area Population' to integers and adding it to 'df' as 'Population'.\ndf['Price'] = data['Price'].apply(int)# Converting 'Price' to integers and adding it to 'df' as 'Price'.\n```\n:::\n\n\n::: {#b40dcc83 .cell execution_count=7}\n``` {.python .cell-code}\nsns.displot(data['Avg. Area Number of Bedrooms'], kde=False, bins=40)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Jithin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\seaborn\\axisgrid.py:123: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](MineCrafters_files/figure-html/cell-8-output-2.png){width=470 height=470}\n:::\n:::\n\n\n::: {#c49d1c45 .cell execution_count=8}\n``` {.python .cell-code}\n# Price plot\nplt.figure(figsize = (12, 6), dpi = 200)\nsns.distplot(data.Price)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Jithin\\AppData\\Local\\Temp\\ipykernel_27196\\3496450648.py:3: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(data.Price)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](MineCrafters_files/figure-html/cell-9-output-2.png){}\n:::\n:::\n\n\n::: {#21488db5 .cell execution_count=9}\n``` {.python .cell-code}\n# Price wrt Income\nplt.figure(figsize = (12, 6), dpi = 200)\nsns.lineplot(x = 'Income', y = 'Price', data = df)\n```\n\n::: {.cell-output .cell-output-display}\n![](MineCrafters_files/figure-html/cell-10-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "MineCrafters_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}